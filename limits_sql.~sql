SELECT * FROM DEV1_OCS.DOCUMENTHISTORY;/*历史记录*/
SELECT * FROM DEV1_OCS.DOCUMENTS;/*文件的信息,上传文件，标记文件等一大堆的信息*/
SELECT a.xclbrauserlist,a.* FROM DEV1_OCS.DOCMETA a order by did DESC FOR UPDATE ;--where a.did =2467 FOR UPDATE  ;/*文件注释等信息，也包括标记文件对应的基础文件,包括权限信息的配置*/
SELECT * FROM DEV1_OCS.FOLDERFILES;/*只有上传文件的信息*/
SELECT * FROM DEV1_OCS.FOLDERFOLDERS;
SELECT * FROM DEV1_OCS.REVISIONS rev  ORDER BY rev.did DESC  ; --WHERE rev.dsecuritygroup IN ( 'AFDocumentsQyj','qyj','qyj2Temp');
SELECT * FROM DEV1_OCS.REVCLASSES;
SELECT * FROM DEV1_OCS.SSXAEXPIREDCACHEIDS;
SELECT * FROM DEV1_OCS.SCTACCESSLOG;
SELECT * FROM DEV1_OCS.SCHEDULEDTASKSHISTORY;
SELECT * FROM DEV1_OCS.USERSECURITYATTRIBUTES;
SELECT * FROM DEV1_OCS.AFOBJECTS;/*该表存储了ebs传过来的合同号，该表一般通过字段ddocname来与其他表相关联*/
SELECT * FROM dev1_ocs.cus_doc_type_list --自定义的类型表

SELECT * FROM  apps.PON_NEG_TEAM_MEMBERS--为ebs中的表，专门用来存放合同的协助小组成员列表

/* 用户权限的基本设置 contributor,AFWrite,AFRead* /
/*
1、导入一个文件
2、document生成2个DDOCID号，一个DID号，分析：一个是源文件，一个是备份文件
   FOLDERFILES生成一条 记录，记录上传文件的信息。
3、DOCUMENTHISTORY也生成一条数据，关联条件应该为DID号。
4、创建一个标记，DOCMETA生成一条记录，记录对应个基础文件。
5、document对应标记生成2个DDOCID号和一个DID号
*/

SELECT distinct t.owner FROM dba_tables t  ;
SELECT * FROM dba_tables t where t.owner = 'DEV_URMSERVER';
select a.table_name,a.COLUMN_NAME from dba_tab_columns a where a.OWNER = 'DEV_OCS';

select count(1) from DEV_URMSERVER.ALIAS ;


SELECT * FROM apps.fnd_documents_vl;
SELECT * FROM apps.pon_auction_headers_all;

SELECT * FROM  DEV_OCS.AFOBJECTS ,字段:DAFBUSINESSOBJECT
SELECT * FROM  DEV_OCS.AFKEYS ,字段:DAFBUSINESSOBJECT
SELECT * FROM  DEV_OCS.AFKEYS ,字段:PK1_VALUE;

SELECT  c.did,b.ffilename FROM  DEV_OCS.AFOBJECTS a, DEV_OCS.FOLDERFILES b,DEV_OCS.REVISIONS c
 where a.ddocname = b.ddocname 
 and b.ddocname = c.ddocname
 and a.dafbusinessobject = '19393';
 
 ----------------------------权限相关的资料--------------------------------------
 
 --查询文件类型
 SELECT docm.xecmtest FROM DEV_OCS.DOCMETA docm where docm.did = 2483;
 
 --查询文件相对应的合同id
 SELECT a.dafbusinessobject,
        b.ffilename,
        c.did,
        (SELECT docm.xecmtest
           FROM DEV_OCS.DOCMETA docm
          where docm.did = 2483) as xType
   FROM DEV_OCS.AFOBJECTS a, DEV_OCS.FOLDERFILES b, DEV_OCS.REVISIONS c
  where a.ddocname = b.ddocname
    and b.ddocname = c.ddocname
    and c.did = 2483;

--获取协助小组的成员
    SELECT FR.USER_NAME FROM apps.PON_NEG_TEAM_MEMBERS TM, apps.FND_USER FR ,apps.qx_people_att_view_resp res
    WHERE TM.USER_ID = FR.USER_ID AND TM.AUCTION_HEADER_ID = 22352 AND FR.USER_ID = res.user_id AND res.category_type = 'MISC' ;
    
--更新改文件的权限
    update DEV_OCS.DOCMETA doc set doc.xclbrauserlist = '&&TEST3(RWDA),&&TEST4(RWDA)'  where doc.did = 2425 ; 
  
----------------------------------------------------权限同步开发相关的代码----------------------------------------------------------------------  
 
 --在 ECM 的数据库中添加
 --创建连接到EBS的dbLink
 --drop database link to_EBS_Dev 
create database link to_EBS_Dev 
connect to system identified by manager   
using '(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=172.16.62.227)(PORT=1531))(CONNECT_DATA=(SID=DEV)))';

 --在 EBS 的数据库中添加
 --创建连接到ECM的公共的dbLink
 --drop public database link to_ECM_Dev 
create public database link to_ECM_Dev 
connect to system identified by manager   
using '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.60.163)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=DEV)))';

--在 EBS 的数据库中添加,用APPS账号
--<合同>类型，编写获取权限名单の方法,这是在 ECM 中。
--DROP FUNCTION CUS_QYJ_FUNC_GETLIMITS_HT;
CREATE OR REPLACE FUNCTION CUS_QYJ_FUNC_GETLIMITS_HT(HT_ID IN VARCHAR2)
  RETURN VARCHAR AS 
  USER_NAME VARCHAR2(50);
  USERLIST  VARCHAR2(300) := '';
  MYCOUNT   INT := 1;
  CURSOR CUR_USER_NAME_LIST IS
  SELECT PUI.USER_NAME
    FROM PO.PO_HEADERS_ALL    PHA,
         APPS.PON_USER_INFO_V PUI
   WHERE PHA.PO_HEADER_ID = HT_ID
     AND PHA.CREATED_BY = PUI.USER_ID
  UNION
  SELECT PUI.USER_NAME
    FROM PO.PO_ACTION_HISTORY PAH,
         APPS.PON_USER_INFO_V PUI
   WHERE PAH.OBJECT_ID = HT_ID
     AND PAH.EMPLOYEE_ID = PUI.PERSON_ID
  UNION
  SELECT PUI.USER_NAME
    FROM APPS.PON_USER_INFO_V PUI, APPS.WF_COMMENTS C
   WHERE C.FROM_USER = PUI.FULL_NAME
     AND C.NOTIFICATION_ID =
         (SELECT MAX(NTFATTRIBSEO.NOTIFICATION_ID)
            FROM APPS.WF_MESSAGE_ATTRIBUTES_VL   MSGATTRIBSEO,
                 APPS.WF_NOTIFICATION_ATTRIBUTES NTFATTRIBSEO,
                 APPS.WF_NOTIFICATIONS           NTFEO,
                 PO.PO_HEADERS_ALL               PHA
           WHERE (MSGATTRIBSEO.NAME = NTFATTRIBSEO.NAME)
             AND (NTFATTRIBSEO.NOTIFICATION_ID = NTFEO.NOTIFICATION_ID)
             AND PHA.PO_HEADER_ID = HT_ID
             AND PHA.SEGMENT1 = NTFATTRIBSEO.TEXT_VALUE
             AND (NTFEO.NOTIFICATION_ID = NTFATTRIBSEO.NOTIFICATION_ID AND
                 NTFEO.MESSAGE_TYPE = MSGATTRIBSEO.MESSAGE_TYPE AND
                 NTFEO.MESSAGE_NAME = MSGATTRIBSEO.MESSAGE_NAME AND
                 MSGATTRIBSEO.NAME = NTFATTRIBSEO.NAME AND
                 MSGATTRIBSEO.NAME = 'DOCUMENT_NUMBER'))
  UNION
  SELECT PUI.USER_NAME
    FROM APPS.PON_USER_INFO_V PUI, APPS.WF_COMMENTS C
   WHERE C.TO_USER = PUI.FULL_NAME
     AND C.NOTIFICATION_ID =
         (SELECT MAX(NTFATTRIBSEO.NOTIFICATION_ID)
            FROM APPS.WF_MESSAGE_ATTRIBUTES_VL   MSGATTRIBSEO,
                 APPS.WF_NOTIFICATION_ATTRIBUTES NTFATTRIBSEO,
                 APPS.WF_NOTIFICATIONS           NTFEO,
                 PO.PO_HEADERS_ALL               PHA
           WHERE (MSGATTRIBSEO.NAME = NTFATTRIBSEO.NAME)
             AND (NTFATTRIBSEO.NOTIFICATION_ID = NTFEO.NOTIFICATION_ID)
             AND PHA.PO_HEADER_ID = HT_ID
             AND PHA.SEGMENT1 = NTFATTRIBSEO.TEXT_VALUE
             AND (NTFEO.NOTIFICATION_ID = NTFATTRIBSEO.NOTIFICATION_ID AND
                 NTFEO.MESSAGE_TYPE = MSGATTRIBSEO.MESSAGE_TYPE AND
                 NTFEO.MESSAGE_NAME = MSGATTRIBSEO.MESSAGE_NAME AND
                 MSGATTRIBSEO.NAME = NTFATTRIBSEO.NAME AND
                 MSGATTRIBSEO.NAME = 'DOCUMENT_NUMBER'));
BEGIN 
  OPEN CUR_USER_NAME_LIST;
  LOOP
    FETCH CUR_USER_NAME_LIST
      INTO USER_NAME;
    EXIT WHEN CUR_USER_NAME_LIST%NOTFOUND;
    BEGIN
      IF MYCOUNT = 1 THEN
        USERLIST := '&&' || upper(USER_NAME) || '(RWDA)';
        MYCOUNT  := 2;
      ELSE
        USERLIST := USERLIST || ',&&' || upper(USER_NAME) || '(RWDA)';
      END IF;
    END;
  END LOOP;
  CLOSE CUR_USER_NAME_LIST;
  RETURN USERLIST;
END;

--在 EBS 的数据库中添加,用APPS账号添加
--<决标>类型，编写获取权限名单の方法。
--drop function CUS_QYJ_FUNC_GETLIMITS_JB
CREATE OR REPLACE FUNCTION CUS_QYJ_FUNC_GETLIMITS_JB(ZB_ID IN VARCHAR2)
  RETURN VARCHAR AS
  USER_NAME VARCHAR2(50);
  USERLIST  VARCHAR2(300) := '';
  MYCOUNT   INT := 1;
  CURSOR CUR_USER_NAME_LIST IS
    SELECT DECODE(HIST.ACTION_USER_ID, 0, NULL, PUI.USER_NAME) APPROVER_NAME
      FROM APPS.PON_ACTION_HISTORY HIST,
           APPS.FND_USER           USERS,
           APPS.PER_ALL_PEOPLE_F   EMP,
           APPS.FND_LOOKUP_VALUES  LOOKUPS,
           APPS.PON_USER_INFO_V    PUI
     WHERE HIST.OBJECT_ID = ZB_ID
       AND PUI.PERSON_ID = EMP.PERSON_ID
       AND HIST.OBJECT_TYPE_CODE = 'NEGOTIATION_AWARD'
       AND HIST.ACTION_TYPE IN
           ('AWARD_APPROVAL_SUBMIT', 'AWARD_APPROVAL_PENDING',
            'AWARD_APPROVE', 'AWARD_REJECT', 'AWARD_APPROVAL_FORWARD',
            'AWARD_APPROVE_AND_FORWARD')
       AND HIST.ACTION_USER_ID = USERS.USER_ID
       AND USERS.EMPLOYEE_ID = EMP.PERSON_ID(+)
       AND LOOKUPS.LOOKUP_TYPE = 'PON_AWARD_APPROVAL_ACTION'
       AND HIST.ACTION_TYPE = LOOKUPS.LOOKUP_CODE
       AND LOOKUPS.LANGUAGE = USERENV('LANG')
       AND LOOKUPS.VIEW_APPLICATION_ID = 0
       AND LOOKUPS.SECURITY_GROUP_ID = 0
       AND TRUNC(SYSDATE) BETWEEN EMP.EFFECTIVE_START_DATE(+) AND
           EMP.EFFECTIVE_END_DATE(+)
    UNION
    SELECT UPPER(C.DDOCAUTHOR)
      FROM DEV1_OCS.AFOBJECTS@TO_ECM_DEV A, DEV1_OCS.REVISIONS@TO_ECM_DEV C
     WHERE A.DDOCNAME = C.DDOCNAME
       AND A.DAFBUSINESSOBJECT = ZB_ID
       AND DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL';
BEGIN
  OPEN CUR_USER_NAME_LIST;
  LOOP
    FETCH CUR_USER_NAME_LIST
      INTO USER_NAME;
    EXIT WHEN CUR_USER_NAME_LIST%NOTFOUND;
    BEGIN
      IF MYCOUNT = 1 THEN
        USERLIST := '&&' || UPPER(USER_NAME) || '(RWDA)';
        MYCOUNT  := 2;
      ELSE
        USERLIST := USERLIST || ',&&' || UPPER(USER_NAME) || '(RWDA)';
      END IF;
    END;
  END LOOP;
  CLOSE CUR_USER_NAME_LIST;
  RETURN USERLIST;
END;

--在 EBS 的数据库中添加,用APPS账号添加
--<招标>类型，编写获取权限名单の方法。
--drop function CUS_QYJ_FUNC_GETLIMITS_ZB
CREATE OR REPLACE FUNCTION CUS_QYJ_FUNC_GETLIMITS_ZB(ZB_ID IN VARCHAR2,
                                                     XTYPE IN VARCHAR2)
  RETURN VARCHAR AS
  USER_NAME VARCHAR2(50);
  USERLIST  VARCHAR2(300) := '';
  MYCOUNT   INT := 1;
  CURSOR CUR_USER_NAME_LIST IS
    SELECT FR.USER_NAME
      FROM APPS.PON_NEG_TEAM_MEMBERS    TM,
           APPS.FND_USER                FR,
           APPS.QX_PEOPLE_ATT_VIEW_RESP RES
     WHERE TM.USER_ID = FR.USER_ID
       AND TM.AUCTION_HEADER_ID = ZB_ID
       AND FR.USER_ID = RES.USER_ID
       AND RES.CATEGORY_TYPE = XTYPE
    UNION
    SELECT FU.USER_NAME
      FROM FND_USER                 FU,
           FND_FLEX_VALUE_SETS      FVS,
           FND_FLEX_VALUES          FFV,
           APPS.PON_BIDDING_PARTIES PBP,
           APPS.PON_AUCTION_HEADERS_ALL PAH
     WHERE EMPLOYEE_ID IS NULL
       AND FVS.FLEX_VALUE_SET_NAME = 'QX_JOB_DOC_TYPE'
       AND FVS.FLEX_VALUE_SET_ID = FFV.FLEX_VALUE_SET_ID
       AND FFV.PARENT_FLEX_VALUE_LOW = '供应商'
       AND PBP.TRADING_PARTNER_CONTACT_ID = FU.CUSTOMER_ID
       AND PBP.AUCTION_HEADER_ID = ZB_ID
       AND FFV.ENABLED_FLAG = 'Y'
       AND FFV.FLEX_VALUE = XTYPE
       AND PBP.AUCTION_HEADER_ID = PAH.AUCTION_HEADER_ID
       AND PAH.AUCTION_STATUS <> 'DRAFT'  
    UNION
    SELECT UPPER(C.DDOCAUTHOR)
      FROM DEV1_OCS.AFOBJECTS@TO_ECM_DEV A, DEV1_OCS.REVISIONS@TO_ECM_DEV C
     WHERE A.DDOCNAME = C.DDOCNAME
       AND A.DAFBUSINESSOBJECT = ZB_ID
       AND DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL';
BEGIN
  OPEN CUR_USER_NAME_LIST;
  LOOP
    FETCH CUR_USER_NAME_LIST
      INTO USER_NAME;
    EXIT WHEN CUR_USER_NAME_LIST%NOTFOUND;
    BEGIN
      IF MYCOUNT = 1 THEN
        USERLIST := '&&' || UPPER(USER_NAME) || '(RWDA)';
        MYCOUNT  := 2;
      ELSE
        USERLIST := USERLIST || ',&&' || UPPER(USER_NAME) || '(RWDA)';
      END IF;
    END;
  END LOOP;
  CLOSE CUR_USER_NAME_LIST;
  RETURN USERLIST;
END;

--在 EBS 的数据库中添加,用APPS账号添加
--该方法不去判断该招标是否已发布，获取所有人员的权限
--drop function CUS_QYJ_FUNC_GETLIMITS_ZB2
CREATE OR REPLACE FUNCTION CUS_QYJ_FUNC_GETLIMITS_ZB2(ZB_ID IN VARCHAR2,
                                                     XTYPE IN VARCHAR2)
  RETURN VARCHAR AS
  USER_NAME VARCHAR2(50);
  USERLIST  VARCHAR2(300) := '';
  MYCOUNT   INT := 1;
  CURSOR CUR_USER_NAME_LIST IS
    SELECT FR.USER_NAME
      FROM APPS.PON_NEG_TEAM_MEMBERS    TM,
           APPS.FND_USER                FR,
           APPS.QX_PEOPLE_ATT_VIEW_RESP RES
     WHERE TM.USER_ID = FR.USER_ID
       AND TM.AUCTION_HEADER_ID = ZB_ID
       AND FR.USER_ID = RES.USER_ID
       AND RES.CATEGORY_TYPE = XTYPE
    UNION
    SELECT FU.USER_NAME
      FROM FND_USER                 FU,
           FND_FLEX_VALUE_SETS      FVS,
           FND_FLEX_VALUES          FFV,
           APPS.PON_BIDDING_PARTIES PBP
     WHERE EMPLOYEE_ID IS NULL
       AND FVS.FLEX_VALUE_SET_NAME = 'QX_JOB_DOC_TYPE'
       AND FVS.FLEX_VALUE_SET_ID = FFV.FLEX_VALUE_SET_ID
       AND FFV.PARENT_FLEX_VALUE_LOW = '供应商'
       AND PBP.TRADING_PARTNER_CONTACT_ID = FU.CUSTOMER_ID
       AND PBP.AUCTION_HEADER_ID = ZB_ID
       AND FFV.ENABLED_FLAG = 'Y'
       AND FFV.FLEX_VALUE = XTYPE
    UNION
    SELECT UPPER(C.DDOCAUTHOR)
      FROM DEV1_OCS.AFOBJECTS@TO_ECM_DEV A, DEV1_OCS.REVISIONS@TO_ECM_DEV C
     WHERE A.DDOCNAME = C.DDOCNAME
       AND A.DAFBUSINESSOBJECT = ZB_ID
       AND DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL';
BEGIN
  OPEN CUR_USER_NAME_LIST;
  LOOP
    FETCH CUR_USER_NAME_LIST
      INTO USER_NAME;
    EXIT WHEN CUR_USER_NAME_LIST%NOTFOUND;
    BEGIN
      IF MYCOUNT = 1 THEN
        USERLIST := '&&' || UPPER(USER_NAME) || '(RWDA)';
        MYCOUNT  := 2;
      ELSE
        USERLIST := USERLIST || ',&&' || UPPER(USER_NAME) || '(RWDA)';
      END IF;
    END;
  END LOOP;
  CLOSE CUR_USER_NAME_LIST;
  RETURN USERLIST;
END;

/*declare 
myTemp varchar2(1000);
begin
    --myTemp := SYSTEM.CUS_QYJ_FUNC_GETLIMITS_ZB@to_EBS_Dev('24405','CUSTOM1000703');
    myTemp := CUS_QYJ_FUNC_GETLIMITS_HT('16054');
    dbms_output.put_line(myTemp);
end;*/

--在 ECM 的数据库中添加，,SYSTEM用户添加
--该触发器主要是当上传文件时，根据EBS中的规则写入正确的权限。
--DROP TRIGGER CUS_QYJ_TRIGGER_LIMITS_INSERT1;
--SELECT * FROM all_triggers WHERE table_name = 'DOCMETA';

CREATE OR REPLACE TRIGGER CUS_QYJ_TRIGGER_LIMITS_INSERT1
  BEFORE INSERT ON DEV1_OCS.DOCMETA
  FOR EACH ROW
DECLARE
  MYCOUNT   INT;
  DOCM_TYPE VARCHAR2(60);
  DOCM_DID  VARCHAR2(30);
  MY_ID     VARCHAR2(60);
  MY_DID       INT;
  USERNAME  VARCHAR2(300);
BEGIN  
   SELECT COUNT(1)
     INTO MYCOUNT
     FROM DEV1_OCS.REVISIONS REV, DEV1_OCS.AFOBJECTS AFO
    WHERE REV.DID = :NEW.DID
      AND REV.DDOCNAME = AFO.DDOCNAME;
    
     IF  MYCOUNT > 0  THEN
     
      SELECT DISTINCT AFO.DAFBUSINESSOBJECTTYPE, AFO.DAFBUSINESSOBJECT, UPPER(REV.DDOCAUTHOR)
        INTO DOCM_TYPE , MY_ID ,USERNAME
        FROM DEV1_OCS.REVISIONS REV, DEV1_OCS.AFOBJECTS AFO
       WHERE REV.DID = :NEW.DID
         AND REV.DDOCNAME = AFO.DDOCNAME;
         
         
      IF :NEW.XECMTEST <> 'juebiao' THEN
          IF DOCM_TYPE = 'PON_AUCTION_HEADERS_ALL' THEN
            :NEW.XCLBRAUSERLIST := APPS.CUS_QYJ_FUNC_GETLIMITS_ZB@to_EBS_Dev(MY_ID,:NEW.XECMTEST);
          ELSIF DOCM_TYPE = 'PO_HEADERS_MERGE_V' OR DOCM_TYPE = 'PON_BID_HEADERS' THEN
            :NEW.XCLBRAUSERLIST := '&&' || USERNAME || '(RWDA)';
          END IF;
      ELSE
          :NEW.XCLBRAUSERLIST := '&&' || USERNAME || '(RWDA)';
      END IF;
      
    END IF;
END;

--在 ECM 的数据库中添加，SYSTEM用户添加
--该触发器主要是，当用户修改<招标>文件的类型时，重新设置该文件相对应的权限。
--drop TRIGGER CUS_QYJ_TRIGGER_LIMITS_UPDATE1
--SELECT * FROM All_Triggers v WHERE v.table_name = 'DOCMETA';
CREATE OR REPLACE TRIGGER CUS_QYJ_TRIGGER_LIMITS_UPDATE1
  BEFORE UPDATE ON DEV1_OCS.DOCMETA
  FOR EACH ROW
DECLARE
  MYCOUNT   INT;
  DOCM_TYPE VARCHAR2(60);
  MY_ID     VARCHAR2(60);
  USERNAME  VARCHAR2(300);
  TEMP  VARCHAR2(300);
BEGIN
  IF :NEW.XECMTEST <> :OLD.XECMTEST THEN
        SELECT COUNT(1)
          INTO MYCOUNT
          FROM DEV1_OCS.AFOBJECTS A, DEV1_OCS.REVISIONS C
         WHERE A.DDOCNAME = C.DDOCNAME
           AND C.DID = :NEW.DID;
              
        IF MYCOUNT = 1 THEN
          SELECT DISTINCT A.DAFBUSINESSOBJECTTYPE, A.DAFBUSINESSOBJECT ,UPPER(C.DDOCAUTHOR)
            INTO DOCM_TYPE , MY_ID , USERNAME
            FROM DEV1_OCS.AFOBJECTS A, DEV1_OCS.REVISIONS C
           WHERE A.DDOCNAME = C.DDOCNAME
             AND C.DID = :NEW.DID;
            
            IF DOCM_TYPE = 'PON_AUCTION_HEADERS_ALL' THEN
               IF :NEW.XECMTEST = 'juebiao' THEN          
                 TEMP := APPS.CUS_QYJ_FUNC_GETLIMITS_JB@to_EBS_Dev(MY_ID);
                 IF TEMP IS NOT NULL THEN
                    :NEW.XCLBRAUSERLIST := TEMP;
                 ELSE
                    :NEW.XCLBRAUSERLIST := '&&' || USERNAME || '(RWDA)';
                 END IF;
               ELSE 
                 :NEW.XCLBRAUSERLIST := APPS.CUS_QYJ_FUNC_GETLIMITS_ZB@to_EBS_Dev(MY_ID,:NEW.XECMTEST);
               END IF;
            END IF;
        END IF;
  END IF;
END;

--在 EBS 的数据库中添加,APPS用户添加
--该触发器主要是，当用户在EBS中添加合同的协助小组的成员，将重新设置该合同下的所有文件相对应的权限。
--DROP TRIGGER CUS_QYJ_LIMITS_ADDUSER_ZB
--SELECT * FROM all_triggers WHERE table_name = 'PON_NEG_TEAM_MEMBERS';
CREATE OR REPLACE TRIGGER CUS_QYJ_LIMITS_ADDUSER_ZB
  AFTER INSERT ON APPS.PON_NEG_TEAM_MEMBERS
  FOR EACH ROW
DECLARE
  MYCOUNT INT;
BEGIN
  SELECT COUNT(1)
    INTO MYCOUNT
    FROM DEV1_OCS.AFOBJECTS@TO_ECM_DEV T,
         DEV1_OCS.REVISIONS@TO_ECM_DEV R,
         DEV1_OCS.DOCMETA@TO_ECM_DEV   D
   WHERE T.DDOCNAME = R.DDOCNAME
     AND D.DID = R.DID
     AND T.DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL'
     AND T.DAFBUSINESSOBJECT = :NEW.AUCTION_HEADER_ID;
  IF MYCOUNT > 0 THEN
    MYCOUNT := APPS.CUS_FUNC_UPDATELIMITSUSER(:NEW.AUCTION_HEADER_ID,
                                                :NEW.USER_ID);
  END IF;
END;

--在EBS的数据库中添加,APPS用户添加
--根据<招标>id，更新相关文件的权限
--drop function cus_func_updateLimitsUser;
CREATE OR REPLACE FUNCTION cus_func_updateLimitsUser(ht_id IN VARCHAR2,myUserID IN VARCHAR2)
RETURN INTEGER
AS
   my_docm_did VARCHAR2(50);
   XType    VARCHAR2(50);
   userList VARCHAR2(60);
   tempList VARCHAR2(300);
   myflag   INTEGER;
   CURSOR cur_list IS  
        SELECT r.did, d.xecmtest
          FROM dev1_ocs.afobjects@to_ecm_dev t, DEV1_OCS.REVISIONS@to_ecm_dev r, DEV1_OCS.DOCMETA@to_ecm_dev d
         WHERE t.ddocname = r.ddocname
           AND d.did = r.did
           AND t.DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL'
           AND t.dafbusinessobject = ht_id;
   RESULT INTEGER;
BEGIN
   RESULT := 0;
   SELECT US.USER_NAME INTO userList FROM apps.FND_USER US WHERE US.USER_ID = myUserID;
   OPEN cur_list;
    LOOP
      FETCH cur_list INTO my_docm_did,XType; 
        EXIT WHEN cur_list%NOTFOUND;
           BEGIN
              SELECT COUNT(1) INTO myflag FROM apps.qx_people_att_view_resp res WHERE res.user_id = myUserID AND res.category_type = XType;
              IF myflag>0 THEN
                  SELECT doc.xclbrauserlist INTO tempList FROM DEV1_OCS.DOCMETA@to_ecm_dev doc WHERE doc.did = my_docm_did;
               IF tempList IS NOT NULL THEN 
                  UPDATE DEV1_OCS.DOCMETA@to_ecm_dev a SET a.xclbrauserlist = a.xclbrauserlist || ',&&' || upper(userList) || '(RWDA)' WHERE a.did = my_docm_did OR XMARKUP_BASEDID = my_docm_did;
               ELSE
                  UPDATE DEV1_OCS.DOCMETA@to_ecm_dev a SET a.xclbrauserlist = '&&' || upper(userList) || '(RWDA)' WHERE a.did = my_docm_did OR XMARKUP_BASEDID = my_docm_did;
               END IF;
               RESULT := RESULT + 1;
              END IF;
           END;
    END LOOP;
    CLOSE cur_list;
   RETURN RESULT;
END;

--在ebs的数据库中添加,APPS
--2.1该触发器主要是，当用户在EBS中“删除”合同的协助小组的成员，将重新设置该合同下的所有文件相对应的权限。
--DROP TRIGGER  cus_qyj_limits_delUser_ZB
CREATE OR REPLACE TRIGGER CUS_QYJ_LIMITS_DELUSER_ZB
  BEFORE DELETE ON APPS.PON_NEG_TEAM_MEMBERS
  FOR EACH ROW
DECLARE
  MYCOUNT INT;
BEGIN
  SELECT COUNT(1)
    INTO MYCOUNT
    FROM DEV1_OCS.AFOBJECTS@TO_ECM_DEV T,
         DEV1_OCS.REVISIONS@TO_ECM_DEV R,
         DEV1_OCS.DOCMETA@TO_ECM_DEV   D
   WHERE T.DDOCNAME = R.DDOCNAME
     AND D.DID = R.DID
     AND T.DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL'
     AND T.DAFBUSINESSOBJECT = :OLD.AUCTION_HEADER_ID;
  IF MYCOUNT > 0 THEN
    MYCOUNT := APPS.CUS_FUNC_DELETELIMITSUSER(:OLD.AUCTION_HEADER_ID,
                                                :OLD.USER_ID);
  END IF;
END;

--在ebs的数据库中添加,apps用户添加
--2.2根据招标id，更新相关文件的权限
--drop function cus_func_deleteLimitsUser;
CREATE OR REPLACE FUNCTION CUS_FUNC_DELETELIMITSUSER(HT_ID    IN VARCHAR2,
                                                     MYUSERID IN VARCHAR2)
  RETURN INTEGER AS
  MY_DOCM_DID VARCHAR2(50);
  XTYPE       VARCHAR2(50);
  USERLIST    VARCHAR2(60);
  TEMPLIST    VARCHAR2(300);
  MYFLAG      INTEGER;
  CURSOR CUR_LIST IS
    SELECT R.DID, D.XECMTEST
      FROM DEV1_OCS.AFOBJECTS@TO_ECM_DEV T,
           DEV1_OCS.REVISIONS@TO_ECM_DEV R,
           DEV1_OCS.DOCMETA@TO_ECM_DEV   D
     WHERE T.DDOCNAME = R.DDOCNAME
       AND D.DID = R.DID
       AND T.DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL'
       AND T.DAFBUSINESSOBJECT = HT_ID;
  RESULT INTEGER;
BEGIN
  RESULT := 0;
  SELECT US.USER_NAME
    INTO USERLIST
    FROM APPS.FND_USER US
   WHERE US.USER_ID = MYUSERID;
  OPEN CUR_LIST;
  LOOP
    FETCH CUR_LIST
      INTO MY_DOCM_DID, XTYPE;
    EXIT WHEN CUR_LIST%NOTFOUND;
    BEGIN
      SELECT COUNT(1)
        INTO MYFLAG
        FROM APPS.QX_PEOPLE_ATT_VIEW_RESP RES
       WHERE RES.USER_ID = MYUSERID
         AND RES.CATEGORY_TYPE = XTYPE;
      IF MYFLAG > 0 THEN
        SELECT DOC.XCLBRAUSERLIST
          INTO TEMPLIST
          FROM DEV1_OCS.DOCMETA@TO_ECM_DEV DOC
         WHERE DOC.DID = MY_DOCM_DID;
        IF TEMPLIST IS NOT NULL THEN
          IF INSTR(TEMPLIST, '&&' || UPPER(USERLIST)) = 1 THEN
            UPDATE DEV1_OCS.DOCMETA@TO_ECM_DEV A
               SET A.XCLBRAUSERLIST = REGEXP_REPLACE(A.XCLBRAUSERLIST,
                                                     '&&' || UPPER(USERLIST) ||
                                                     '\(([A-Z])*\),')
             WHERE A.DID = MY_DOCM_DID OR A.XMARKUP_BASEDID = MY_DOCM_DID;
          ELSE
            UPDATE DEV1_OCS.DOCMETA@TO_ECM_DEV A
               SET A.XCLBRAUSERLIST = REGEXP_REPLACE(A.XCLBRAUSERLIST,
                                                     ',&&' || UPPER(USERLIST) ||
                                                     '\(([A-Z])*\)')
             WHERE A.DID = MY_DOCM_DID OR A.XMARKUP_BASEDID = MY_DOCM_DID;
          END IF;
        END IF;
        RESULT := RESULT + 1;
      END IF;
    END;
  END LOOP;
  CLOSE CUR_LIST;
  RETURN RESULT;
END;


--------合同请求多人时，权限的同步--------------
--SELECT * FROM all_triggers s WHERE s.table_name = 'WF_COMMENTS' ;
--DROP TRIGGER CUS_QYJ_TRIGGER_LIMITS_HT;
CREATE OR REPLACE TRIGGER CUS_QYJ_TRIGGER_LIMITS_HT
  BEFORE INSERT ON APPLSYS.WF_COMMENTS
  FOR EACH ROW
DECLARE
  MYCOUNT   INT;
  DOCM_TYPE VARCHAR2(60);
  MY_ID     VARCHAR2(60);
  USER_NAME VARCHAR2(60);
BEGIN
  SELECT S.MESSAGE_TYPE
    INTO DOCM_TYPE
    FROM APPS.WF_NOTIFICATIONS S
   WHERE :NEW.NOTIFICATION_ID = S.NOTIFICATION_ID
     AND ROWNUM = 1;

  IF DOCM_TYPE = 'POAPPRV' THEN
    SELECT PHA.PO_HEADER_ID
      INTO MY_ID
      FROM APPS.WF_MESSAGE_ATTRIBUTES_VL   MSGATTRIBSEO,
           APPS.WF_NOTIFICATION_ATTRIBUTES NTFATTRIBSEO,
           APPS.WF_NOTIFICATIONS           NTFEO,
           PO.PO_HEADERS_ALL               PHA
     WHERE (MSGATTRIBSEO.NAME = NTFATTRIBSEO.NAME)
       AND (NTFATTRIBSEO.NOTIFICATION_ID = NTFEO.NOTIFICATION_ID)
       AND NTFATTRIBSEO.NOTIFICATION_ID = :NEW.NOTIFICATION_ID
       AND PHA.SEGMENT1 = NTFATTRIBSEO.TEXT_VALUE
       AND (NTFEO.NOTIFICATION_ID = NTFATTRIBSEO.NOTIFICATION_ID AND
           NTFEO.MESSAGE_TYPE = MSGATTRIBSEO.MESSAGE_TYPE AND
           NTFEO.MESSAGE_NAME = MSGATTRIBSEO.MESSAGE_NAME AND
           MSGATTRIBSEO.NAME = NTFATTRIBSEO.NAME AND
           MSGATTRIBSEO.NAME = 'DOCUMENT_NUMBER');
  
    IF MY_ID IS NOT NULL THEN
     SELECT upper(PUI.USER_NAME)
       INTO USER_NAME
       FROM APPS.PON_USER_INFO_V PUI
      WHERE :NEW.TO_USER = PUI.FULL_NAME
        AND ROWNUM = 1;
    
      IF USER_NAME IS NOT NULL THEN
         UPDATE DEV1_OCS.DOCMETA@TO_ECM_DEV A
            SET A.XCLBRAUSERLIST = A.XCLBRAUSERLIST ||
                                   DECODE(A.XCLBRAUSERLIST,
                                          '',
                                          '&&' || USER_NAME || '(RWDA)',
                                          DECODE(INSTR(A.XCLBRAUSERLIST,
                                                       USER_NAME),
                                                 0,
                                                 ',&&' || USER_NAME || '(RWDA)',
                                                 ''))
          WHERE EXISTS (SELECT 1
                   FROM DEV1_OCS.REVISIONS@TO_ECM_DEV REV,
                        DEV1_OCS.AFOBJECTS@TO_ECM_DEV AFO
                  WHERE REV.DDOCNAME = AFO.DDOCNAME
                    AND AFO.DAFBUSINESSOBJECT = MY_ID
                    AND AFO.DAFBUSINESSOBJECTTYPE = 'PO_HEADERS_MERGE_V'
                    AND (A.DID = REV.DID OR A.XMARKUP_BASEDID = REV.DID));
       END IF;
    END IF;
  END IF;
  Exception WHEN OTHERS THEN 
     NULL;
END;

-----------------------------------------------------------------------------
--合同转发时，添加人员的权限到附件中,ebs中添加,apps
--DROP TRIGGER  CUS_QYJ_LIMITS_ADDUSER_HT;
CREATE OR REPLACE TRIGGER CUS_QYJ_LIMITS_ADDUSER_HT
  BEFORE INSERT ON PO.PO_ACTION_HISTORY
  FOR EACH ROW
DECLARE
  MYCOUNT   INT;
  USER_NAME VARCHAR2(60);
  MY_ID     VARCHAR2(60);
BEGIN

  SELECT COUNT(1)
    INTO MYCOUNT
    FROM DEV1_OCS.AFOBJECTS@TO_ECM_DEV AFO
   WHERE AFO.DAFBUSINESSOBJECTTYPE = 'PO_HEADERS_MERGE_V'
     AND AFO.DAFBUSINESSOBJECT = :NEW.OBJECT_ID;

  IF MYCOUNT > 0 THEN
  
    SELECT upper(PUI.USER_NAME)
      INTO USER_NAME
      FROM APPS.PON_USER_INFO_V PUI
     WHERE :NEW.EMPLOYEE_ID = PUI.PERSON_ID;
  
    UPDATE DEV1_OCS.DOCMETA@TO_ECM_DEV A
       SET A.XCLBRAUSERLIST = A.XCLBRAUSERLIST ||
                              DECODE(A.XCLBRAUSERLIST,
                                     '',
                                     '&&' || USER_NAME ||'(RWDA)',
                                     DECODE(INSTR(A.XCLBRAUSERLIST, USER_NAME),
                                            0,
                                            ',&&' || USER_NAME || '(RWDA)',
                                            ''))
     WHERE EXISTS (SELECT 1
              FROM DEV1_OCS.REVISIONS@TO_ECM_DEV REV,
                   DEV1_OCS.AFOBJECTS@TO_ECM_DEV AFO
             WHERE REV.DDOCNAME = AFO.DDOCNAME
               AND AFO.DAFBUSINESSOBJECT = :NEW.OBJECT_ID
               AND AFO.DAFBUSINESSOBJECTTYPE = 'PO_HEADERS_MERGE_V'
               AND (A.DID = REV.DID OR A.XMARKUP_BASEDID = REV.DID));
  END IF;
END;

--决标提交时，添加人员的权限到附件中,ebs中添加,apps
--DROP TRIGGER  CUS_QYJ_LIMITS_ADDUSER_JB;
CREATE OR REPLACE TRIGGER CUS_QYJ_LIMITS_ADDUSER_JB
  BEFORE INSERT ON APPS.PON_ACTION_HISTORY
  FOR EACH ROW
DECLARE
  MYCOUNT   INT;
  USER_NAME VARCHAR2(60);
  MY_ID     VARCHAR2(60);
BEGIN
  IF :NEW.OBJECT_TYPE_CODE = 'NEGOTIATION_AWARD' AND
     :NEW.ACTION_USER_ID <> '0' AND
     :NEW.ACTION_TYPE = 'AWARD_APPROVAL_PENDING' THEN
  
    SELECT US.USER_NAME
      INTO USER_NAME
      FROM APPS.FND_USER US
     WHERE US.USER_ID = :NEW.ACTION_USER_ID;
  
    IF USER_NAME IS NOT NULL THEN
    
      UPDATE DEV1_OCS.DOCMETA@TO_ECM_DEV A
         SET A.XCLBRAUSERLIST = A.XCLBRAUSERLIST ||
                                DECODE(A.XCLBRAUSERLIST,
                                       '',
                                       '&&' || USER_NAME || '(RWDA)',
                                       DECODE(INSTR(A.XCLBRAUSERLIST,
                                                    USER_NAME),
                                              0,
                                              ',&&' || USER_NAME || '(RWDA)',
                                              ''))
       WHERE A.XECMTEST = 'juebiao' AND EXISTS
       (SELECT 1
                FROM DEV1_OCS.REVISIONS@TO_ECM_DEV REV,
                     DEV1_OCS.AFOBJECTS@TO_ECM_DEV AFO
               WHERE REV.DDOCNAME = AFO.DDOCNAME
                 AND AFO.DAFBUSINESSOBJECT = :NEW.OBJECT_ID
                 AND AFO.DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL'
                 AND (A.DID = REV.DID OR A.XMARKUP_BASEDID = REV.DID));
    
    END IF;
  END IF;
END;


--招标发布时，添加供应商的权限到附件中,ebs中添加,apps
--回标解锁时，添加相关人员的权限到附件中。
--DROP TRIGGER CUS_QYJ_LIMITS_UPPSUPP_ZB;
CREATE OR REPLACE TRIGGER CUS_QYJ_LIMITS_UPPSUPP_ZB
  BEFORE UPDATE ON APPS.PON_AUCTION_HEADERS_ALL
  FOR EACH ROW
DECLARE
  MYCOUNT INT;
BEGIN
  IF :NEW.AUCTION_STATUS = 'ACTIVE' THEN
    MYCOUNT := CUS_QYJ_FUNC_LIMITS_UPDATE_ZB(:NEW.AUCTION_HEADER_ID);
  END IF;
  IF :NEW.SEALED_AUCTION_STATUS = 'UNLOCKED' THEN
     NULL;
  END IF;
END;

--招标发布时，添加供应商的权限到附件中的方法,ebs中添加,apps
--DROP FUNCTION  CUS_QYJ_FUNC_LIMITS_UPDATE_ZB;
CREATE OR REPLACE FUNCTION CUS_QYJ_FUNC_LIMITS_UPDATE_ZB(ZB_ID IN VARCHAR2)
  RETURN INTEGER AS
  MY_DOCM_DID VARCHAR2(50);
  XTYPE       VARCHAR2(50);
  TEMPLIST    VARCHAR2(300);
  CURSOR CUR_LIST IS
    SELECT R.DID, D.XECMTEST
      FROM DEV1_OCS.AFOBJECTS@TO_ECM_DEV T,
           DEV1_OCS.REVISIONS@TO_ECM_DEV R,
           DEV1_OCS.DOCMETA@TO_ECM_DEV   D
     WHERE T.DDOCNAME = R.DDOCNAME
       AND D.DID = R.DID
       AND T.DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL'
       AND T.DAFBUSINESSOBJECT = ZB_ID;
  RESULT INTEGER;
BEGIN
  RESULT := 0;
  OPEN CUR_LIST;
  LOOP
    FETCH CUR_LIST
      INTO MY_DOCM_DID, XTYPE;
    EXIT WHEN CUR_LIST%NOTFOUND;
    BEGIN
      RESULT   := RESULT + 1;
      TEMPLIST := CUS_QYJ_FUNC_GETLIMITS_ZB2(ZB_ID, XTYPE);
      UPDATE DEV1_OCS.DOCMETA@TO_ECM_DEV A SET A.XCLBRAUSERLIST = TEMPLIST WHERE A.DID = MY_DOCM_DID OR A.XMARKUP_BASEDID = MY_DOCM_DID;
    END;
  END LOOP;
  CLOSE CUR_LIST;
  RETURN RESULT;
END;


---招标已发布，添加供应商时，立即添加相对应的人员,ebs中添加,apps
--SELECT * FROM all_triggers s WHERE s.table_name = 'PON_BIDDING_PARTIES' ;
--DROP TRIGGER CUS_QYJ_LIMITS_ADDSUPP_ZB;
CREATE OR REPLACE TRIGGER CUS_QYJ_LIMITS_ADDSUPP_ZB
  BEFORE INSERT ON APPS.PON_BIDDING_PARTIES
  FOR EACH ROW
DECLARE
  MYCOUNT   INT;
  USER_NAME VARCHAR2(60);
  MY_ID     VARCHAR2(60);
BEGIN
  SELECT US.USER_NAME
    INTO USER_NAME
    FROM APPS.FND_USER US
   WHERE US.CUSTOMER_ID = :NEW.TRADING_PARTNER_CONTACT_ID;

  IF USER_NAME IS NOT NULL THEN
  
    UPDATE DEV1_OCS.DOCMETA@TO_ECM_DEV A
       SET A.XCLBRAUSERLIST = A.XCLBRAUSERLIST ||
                              DECODE(A.XCLBRAUSERLIST,
                                     '',
                                     '&&' || USER_NAME || '(RWDA)',
                                     DECODE(INSTR(A.XCLBRAUSERLIST, USER_NAME),
                                            0,
                                            ',&&' || USER_NAME || '(RWDA)',
                                            ''))
     WHERE EXISTS
     (SELECT 1
              FROM DEV1_OCS.REVISIONS@TO_ECM_DEV REV,
                   DEV1_OCS.AFOBJECTS@TO_ECM_DEV AFO
             WHERE REV.DDOCNAME = AFO.DDOCNAME
               AND AFO.DAFBUSINESSOBJECT = :NEW.AUCTION_HEADER_ID
               AND AFO.DAFBUSINESSOBJECTTYPE = 'PON_AUCTION_HEADERS_ALL'
               AND (A.DID = REV.DID OR A.XMARKUP_BASEDID = REV.DID))
       AND EXISTS
     (SELECT 1
              FROM FND_FLEX_VALUE_SETS FVS, FND_FLEX_VALUES FFV
             WHERE FVS.FLEX_VALUE_SET_NAME = 'QX_JOB_DOC_TYPE'
               AND FVS.FLEX_VALUE_SET_ID = FFV.FLEX_VALUE_SET_ID
               AND FFV.PARENT_FLEX_VALUE_LOW = '供应商'
               AND FFV.ENABLED_FLAG = 'Y'
               AND FFV.FLEX_VALUE = A.XECMTEST)
       AND EXISTS
     (SELECT 1
              FROM APPS.PON_AUCTION_HEADERS_ALL PAH
             WHERE PAH.AUCTION_STATUS <> 'DRAFT'
               AND PAH.AUCTION_HEADER_ID = :NEW.AUCTION_HEADER_ID);
  
  END IF;
END;

---在ECM中添加一个job，用来同步备注与主文件的权限
--what =》 DECLARE temp VARCHAR2(22); begin temp := CUS_QYJ_FUNC_UPDATE_MARKUP(); end;
--Next date=》 sysdate
--Interval =》 TRUNC(sysdate,'mi') + 1/ (24*60)
GRANT ALL ON DEV1_OCS.DOCMETA TO SYSTEM;

CREATE OR REPLACE FUNCTION CUS_QYJ_FUNC_UPDATE_MARKUP RETURN VARCHAR AS
  TEMP VARCHAR2(4);
BEGIN
  TEMP := '0';
  UPDATE DEV1_OCS.DOCMETA A
     SET A.XCLBRAUSERLIST = (SELECT B.XCLBRAUSERLIST
                               FROM DEV1_OCS.DOCMETA B
                              WHERE B.DID = A.XMARKUP_BASEDID)
   WHERE A.XMARKUP_BASEDID <> 0;
  COMMIT;
  RETURN TEMP;
END;
--------------------------------------

SELECT * FROM APPS.PON_AUCTION_HEADERS_ALL A ORDER BY a.auction_header_id DESC ;
SELECT a.xclbrauserlist,a.* FROM DEV1_OCS.DOCMETA@TO_ECM_DEV A ORDER BY A.DID DESC FOR UPDATE ;
SELECT * FROM DEV1_OCS.DOCMETA A ORDER BY A.DID DESC  ;
